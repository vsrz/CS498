<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmountAvailableToBeRefunded" xml:space="preserve">
    <value>Amount Available to be Refunded</value>
  </data>
  <data name="AmountPaid" xml:space="preserve">
    <value>Amount Paid</value>
  </data>
  <data name="AmountPaidSoFar" xml:space="preserve">
    <value>Amount Paid So Far</value>
  </data>
  <data name="AmountRemaining" xml:space="preserve">
    <value>Amount Remaining</value>
  </data>
  <data name="ContributionPaymentType" xml:space="preserve">
    <value>Contribution Payment Type</value>
  </data>
  <data name="Contributions" xml:space="preserve">
    <value>Contributions</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="EditContribution" xml:space="preserve">
    <value>Edit Amount</value>
  </data>
  <data name="MarkPersonAsPaid" xml:space="preserve">
    <value>Mark Person as Paid</value>
  </data>
  <data name="PageHeader" xml:space="preserve">
    <value>Contributions for Retreat Manager</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Retreat - Contributions Manager</value>
  </data>
  <data name="PaidBy" xml:space="preserve">
    <value>Paid By</value>
  </data>
  <data name="PeoplePaidFor" xml:space="preserve">
    <value>People Paid For</value>
  </data>
  <data name="RefundedAmount" xml:space="preserve">
    <value>Refunded Amount</value>
  </data>
  <data name="RefundedTransactions" xml:space="preserve">
    <value>Refunded Transactions</value>
  </data>
  <data name="RefundPayment" xml:space="preserve">
    <value>Refund Payment</value>
  </data>
  <data name="RetreatInstructions" xml:space="preserve">
    <value>From this page, you can manage of all of the contributions made towards this retreat. In addition to viewing the contributions, you can manually mark a person as being paid in full or partial. You can also issue refunds from this screen to those who have payed by credit card through PayPal. For those who have used other methods of payment, the system will record the refunded amount, but the refund itself must be issued manually and is the responsibility of the administrator.</value>
  </data>
  <data name="RetreatName" xml:space="preserve">
    <value>Retreat Name:</value>
  </data>
  <data name="TotalPrice" xml:space="preserve">
    <value>Total Contribution</value>
  </data>
  <data name="ContributionAmount" xml:space="preserve">
    <value>Contribution Amount:</value>
  </data>
  <data name="EditContributionAmount" xml:space="preserve">
    <value>New Contribution Amount:</value>
  </data>
  <data name="EditContributionHeader" xml:space="preserve">
    <value>Edit Contribution Amount</value>
  </data>
  <data name="MarkAsPaid" xml:space="preserve">
    <value>Mark as Paid</value>
  </data>
  <data name="btnEditContribSave" xml:space="preserve">
    <value>Mark As Paid</value>
  </data>
  <data name="btnEditContribuCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnMarkAsPaidCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnMarkAsPaidSave" xml:space="preserve">
    <value>Mark As Paid</value>
  </data>
  <data name="btnRefundCancel" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="btnRefundSave" xml:space="preserve">
    <value>Refund</value>
  </data>
</root>